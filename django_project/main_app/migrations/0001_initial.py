# Generated by Django 4.2.7 on 2023-12-03 23:16

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="EventPlatform",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(help_text="service where this tech group is hosted", max_length=32, unique=True),
                ),
                ("enabled", models.BooleanField(default=True)),
                ("base_url", models.URLField(blank=True, help_text="base url of provider", null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("first_name", models.CharField(max_length=16)),
                ("last_name", models.CharField(max_length=16)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("zip_code", models.CharField(blank=True, max_length=9, null=True)),
            ],
            options={
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="SkillLevel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=16, unique=True)),
                ("description", models.CharField(blank=True, max_length=128, null=True)),
                ("enabled", models.BooleanField(default=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TechGroup",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="organization hosting this event", max_length=32, unique=True)),
                ("description", models.TextField(blank=True, help_text="description of this group", null=True)),
                ("enabled", models.BooleanField(default=True)),
                ("url", models.URLField(blank=True, help_text="url of tech group", null=True)),
                (
                    "platform",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="main_app.eventplatform"
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="TechnicalArea",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=32, unique=True)),
                ("description", models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TechGroupLink",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=32)),
                ("description", models.TextField(blank=True, help_text="description of this link", null=True)),
                ("url", models.URLField()),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="main_app.techgroup")),
            ],
        ),
        migrations.CreateModel(
            name="MemberSkill",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("yoe", models.IntegerField(blank=True, help_text="years of experience with this skill", null=True)),
                (
                    "level",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="main_app.skilllevel"
                    ),
                ),
                ("member", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="main_app.member")),
                ("skill", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="main_app.technicalarea")),
            ],
        ),
        migrations.CreateModel(
            name="MemberLink",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=32)),
                ("description", models.TextField(blank=True, help_text="description of this link", null=True)),
                ("url", models.URLField()),
                (
                    "is_public",
                    models.BooleanField(default=False, help_text="make this contact link publically visible"),
                ),
                ("member", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="main_app.member")),
            ],
        ),
        migrations.CreateModel(
            name="MemberInterest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "interest_level",
                    models.IntegerField(default=1, help_text="level of interest (from 1 to 5) in this technical area"),
                ),
                (
                    "interest",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="main_app.technicalarea"),
                ),
                ("member", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="main_app.member")),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="name of this event", max_length=64)),
                ("description", models.TextField(blank=True, help_text="name of this event", null=True)),
                ("date_time", models.DateTimeField()),
                ("duration", models.IntegerField(blank=True, help_text="planned duration of this event", null=True)),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="location where this event is being hosted", max_length=128, null=True
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="main_app.techgroup"
                    ),
                ),
                ("labels", models.ManyToManyField(to="main_app.technicalarea")),
            ],
            options={
                "ordering": ("-created_at",),
            },
        ),
    ]
